{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\FYP\\\\admin-dashboard\\\\martfury-admin-react\\\\pages\\\\meeting-scheduler\\\\index.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\"; // import ContainerDefault from \"~/components/layouts/ContainerDefault\";\n// import HeaderDashboard from \"~/components/shared/headers/HeaderDashboard\";\n\nimport { Agenda, Day, Inject, Month, ScheduleComponent, Week, WorkWeek } from \"@syncfusion/ej2-react-schedule\";\nimport { addDoc, collection, onSnapshot, query } from \"firebase/firestore\";\nimport { useEffect, useState } from \"react\"; // import { database } from \"./firebase.config\";\n\nimport { database } from \"~/firebaseConfig\";\nimport moment from \"moment\"; // import \"./style.module.css\";\n// export function App() {\n//   const [data, setData] = useState();\n//   useEffect(() => {\n//     const q = query(collection(database, \"events\"));\n//     const unsub = onSnapshot(q, (doc) => {\n//       const tempEvents = [];\n//       doc.forEach((el) => {\n//         console.log(\"CBM\", el.data());\n//         tempEvents.push({\n//           ...el.data(),\n//           EndTime: new Date(el.data().EndTime),\n//           StartTime: new Date(el.data().StartTime),\n//         });\n//       });\n//       setData(tempEvents);\n//     });\n//     return () => unsub();\n//   }, []);\n//   function createEvent(values) {\n//     addDoc(collection(database, \"events\"), values);\n//   }\n//   // return (\n//   //   <>\n//   //     <ScheduleComponent\n//   //       height='550px'\n//   //       selectedDate={new Date(2018, 1, 15)}\n//   //       eventSettings={{ dataSource: data }}\n//   //       actionComplete={(args) => {\n//   //         if (args.requestType === \"eventCreated\") {\n//   //           createEvent({\n//   //             ...args.data[0],\n//   //             EndTime: moment(args.data[0].EndTime).format(),\n//   //             StartTime: moment(args.data[0].StartTime).format(),\n//   //           });\n//   //         }\n//   //       }}\n//   //     >\n//   //       <Inject services={[Day, Week, WorkWeek, Month, Agenda]} />\n//   //     </ScheduleComponent>\n//   //   </>\n//   // );\n// }\n\nconst {\n  0: data,\n  1: setData\n} = useState();\nuseEffect(() => {\n  const q = query(collection(database, \"events\"));\n  const unsub = onSnapshot(q, doc => {\n    const tempEvents = [];\n    doc.forEach(el => {\n      console.log(\"CBM\", el.data());\n      tempEvents.push(_objectSpread(_objectSpread({}, el.data()), {}, {\n        EndTime: new Date(el.data().EndTime),\n        StartTime: new Date(el.data().StartTime)\n      }));\n    });\n    setData(tempEvents);\n  });\n  return () => unsub();\n}, []);\n\nfunction createEvent(values) {\n  addDoc(collection(database, \"events\"), values);\n}\n\nconst CustomersPage = () => {\n  //   const dispatch = useDispatch();\n  //   useEffect(() => {\n  //     dispatch(toggleDrawerMenu(false));\n  //   }, []);\n  return /*#__PURE__*/_jsxDEV(ContainerDefault, {\n    title: \"Meeting Scheduler\",\n    children: [/*#__PURE__*/_jsxDEV(HeaderDashboard, {\n      title: \"Meeting Scheduler\",\n      description: \"Meeting List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Meeting Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ScheduleComponent, {\n        height: \"550px\",\n        selectedDate: new Date(2018, 1, 15),\n        eventSettings: {\n          dataSource: data\n        },\n        actionComplete: args => {\n          if (args.requestType === \"eventCreated\") {\n            createEvent(_objectSpread(_objectSpread({}, args.data[0]), {}, {\n              EndTime: moment(args.data[0].EndTime).format(),\n              StartTime: moment(args.data[0].StartTime).format()\n            }));\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(Inject, {\n          services: [Day, Week, WorkWeek, Month, Agenda]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\nexport default CustomersPage; // export default connect((state) => state.app)(CustomersPage);","map":{"version":3,"sources":["E:/FYP/admin-dashboard/martfury-admin-react/pages/meeting-scheduler/index.jsx"],"names":["React","Agenda","Day","Inject","Month","ScheduleComponent","Week","WorkWeek","addDoc","collection","onSnapshot","query","useEffect","useState","database","moment","data","setData","q","unsub","doc","tempEvents","forEach","el","console","log","push","EndTime","Date","StartTime","createEvent","values","CustomersPage","dataSource","args","requestType","format"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import ContainerDefault from \"~/components/layouts/ContainerDefault\";\n// import HeaderDashboard from \"~/components/shared/headers/HeaderDashboard\";\nimport {\n  Agenda,\n  Day,\n  Inject,\n  Month,\n  ScheduleComponent,\n  Week,\n  WorkWeek,\n} from \"@syncfusion/ej2-react-schedule\";\nimport { addDoc, collection, onSnapshot, query } from \"firebase/firestore\";\nimport { useEffect, useState } from \"react\";\n// import { database } from \"./firebase.config\";\nimport { database } from \"~/firebaseConfig\";\n\nimport moment from \"moment\";\n\n// import \"./style.module.css\";\n\n// export function App() {\n//   const [data, setData] = useState();\n\n//   useEffect(() => {\n//     const q = query(collection(database, \"events\"));\n//     const unsub = onSnapshot(q, (doc) => {\n//       const tempEvents = [];\n//       doc.forEach((el) => {\n//         console.log(\"CBM\", el.data());\n\n//         tempEvents.push({\n//           ...el.data(),\n//           EndTime: new Date(el.data().EndTime),\n//           StartTime: new Date(el.data().StartTime),\n//         });\n//       });\n\n//       setData(tempEvents);\n//     });\n\n//     return () => unsub();\n//   }, []);\n\n//   function createEvent(values) {\n//     addDoc(collection(database, \"events\"), values);\n//   }\n\n//   // return (\n//   //   <>\n//   //     <ScheduleComponent\n//   //       height='550px'\n//   //       selectedDate={new Date(2018, 1, 15)}\n//   //       eventSettings={{ dataSource: data }}\n//   //       actionComplete={(args) => {\n//   //         if (args.requestType === \"eventCreated\") {\n//   //           createEvent({\n//   //             ...args.data[0],\n//   //             EndTime: moment(args.data[0].EndTime).format(),\n//   //             StartTime: moment(args.data[0].StartTime).format(),\n//   //           });\n//   //         }\n//   //       }}\n//   //     >\n//   //       <Inject services={[Day, Week, WorkWeek, Month, Agenda]} />\n//   //     </ScheduleComponent>\n//   //   </>\n//   // );\n// }\nconst [data, setData] = useState();\n\nuseEffect(() => {\n  const q = query(collection(database, \"events\"));\n  const unsub = onSnapshot(q, (doc) => {\n    const tempEvents = [];\n    doc.forEach((el) => {\n      console.log(\"CBM\", el.data());\n\n      tempEvents.push({\n        ...el.data(),\n        EndTime: new Date(el.data().EndTime),\n        StartTime: new Date(el.data().StartTime),\n      });\n    });\n\n    setData(tempEvents);\n  });\n\n  return () => unsub();\n}, []);\n\nfunction createEvent(values) {\n  addDoc(collection(database, \"events\"), values);\n}\n\nconst CustomersPage = () => {\n  //   const dispatch = useDispatch();\n  //   useEffect(() => {\n  //     dispatch(toggleDrawerMenu(false));\n  //   }, []);\n  return (\n    <ContainerDefault title='Meeting Scheduler'>\n      <HeaderDashboard title='Meeting Scheduler' description='Meeting List' />\n      <div>\n        <h1>Meeting Details</h1>\n      </div>\n      <div>\n        <ScheduleComponent\n          height='550px'\n          selectedDate={new Date(2018, 1, 15)}\n          eventSettings={{ dataSource: data }}\n          actionComplete={(args) => {\n            if (args.requestType === \"eventCreated\") {\n              createEvent({\n                ...args.data[0],\n                EndTime: moment(args.data[0].EndTime).format(),\n                StartTime: moment(args.data[0].StartTime).format(),\n              });\n            }\n          }}\n        >\n          <Inject services={[Day, Week, WorkWeek, Month, Agenda]} />\n        </ScheduleComponent>\n      </div>\n    </ContainerDefault>\n  );\n};\nexport default CustomersPage;\n// export default connect((state) => state.app)(CustomersPage);\n"]},"metadata":{},"sourceType":"module"}